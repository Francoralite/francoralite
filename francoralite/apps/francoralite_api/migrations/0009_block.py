# Generated by Django 3.1.12 on 2022-10-12 10:51

from django.db import migrations, models


def add_data(apps, schema_editor):
    Block = apps.get_model('francoralite_api', 'Block')
    Block.objects.create(
        type='M',
        title='Géo-Navigateur',
        order=2,
        show=True,
    )
    Block.objects.create(
        type='P',
        title='Partenaires',
        order=4,
        show=True,
    )
    Block.objects.create(
        type=None,
        title='Présentation',
        order=1,
        show=True,
        content="""
### Plateforme

**Patrimoine oral de la Francophonie (Grand-Ouest français, Canada francophone et Louisiane)**

Cette plateforme regroupe les fonds de littérature orale collectés dès les décennies 30-40 du XXe siècle dans la ruralité du Centre-Ouest français, du Canada francophone et de la Louisiane. Elle formalise un socle culturel cohérent qui s’étale sur ces différents territoires sur plus de quatre siècles d’histoire.

###Présentation

Le fonctionnement de la plateforme s’appuie sur des techniques de documentation de plus en plus avancées en vue de valorisation qui rejoignent les domaines d’application dans les secteurs de la patrimonialisation, du tourisme, de la création artistique et de la participation des populations locales.

La plateforme ambitionne également de dynamiser les démarches scientifiques. Il s’agit non seulement de poser l’archive sonore en alternative au document écrit en tant que source de savoirs mais aussi de mettre en écho les témoignages d’hier avec les préoccupations d’aujourd’hui et enfin d’interroger les dynamiques interculturelles au travers des circulations transatlantiques liées au fait acadien et cadien.

### Fonctionnalités

- Archivage, édition et publications sécurisés de fichiers audio, par Internet
- Interface Web utilisateur "Pure HTML" utilisant des formulaires dynamiques et une gestion de flux adaptée
- Analyse et transcodage de fichiers audio "à la volée", grâce à TimeSide
- Lecteur audio évolué et personnalisable, avec saisie d'annotations

### Organisation du catalogue

Le catalogue est organisé en 5 niveaux : **Institutions** (emplacement propre à chacun des partenaires scientifiques), **Fonds**, **Missions**, **Enquêtes**, et **Items**. Le niveau principal de description est l’**Enquête**.

Chaque enquête regroupe l’ensemble des fichiers audio (**Items**) collectés auprès d’une même personne (ou groupe de personnes), le même jour en un même lieu. Les enquêtes répondant d’un ensemble cohérent ou collectées sur une même année sont regroupées en **Missions** qui, réunies autour d’un collecteur, constituent le niveau **Fonds**.

Le nombre d’enregistrements mis en ligne sur la plateforme est en constante augmentation. Les fiches descriptives sont renseignées de manière collaborative par les usagers des différents partenaires de la plateforme.
""".strip(),
    )
    Block.objects.create(
        type=None,
        title='Focus',
        order=3,
        show=True,
    )


class Migration(migrations.Migration):

    dependencies = [
        ('francoralite_api', '0008_item_domain'),
    ]

    operations = [
        migrations.CreateModel(
            name='Block',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[(None, 'Custom text'), ('M', 'Map'), ('P', 'Partners')], default=None, max_length=1, null=True, unique=True, verbose_name='type')),
                ('title', models.CharField(max_length=255, unique=True, verbose_name='title')),
                ('content', models.TextField(blank=True, default=None, null=True, verbose_name='content')),
                ('order', models.PositiveSmallIntegerField(unique=True, verbose_name='order')),
                ('show', models.BooleanField(default=False, verbose_name='show')),
            ],
            options={
                'verbose_name_plural': 'blocks',
                'db_table': 'block',
                'ordering': ['order', 'title'],
            },
        ),
        migrations.RunPython(
            code=add_data,
            atomic=True,
        ),
    ]
