---

# Docker compose to build Telemeta meta project

version: '2.1'

x-logging:
  &default-logging
  driver: 'json-file'
  options:
    max-size: "${LOGGING_MAX_SIZE}"
    max-file: "${LOGGING_MAX_FILE}"

x-network-internal:
  &network-internal
  - 'francoralite'

networks:
  keycloak: {}
  francoralite: {}
  services:
    external:
      name: 'services'

services:
  data:
    image: "${DATA_IMAGE_NAME}:${DATA_IMAGE_VERSION}"
    command: 'true'
    restart: 'on-failure'
    logging: *default-logging
    networks: *network-internal
    volumes:
       - 'data_media/:/srv/media'
       - 'data_backup/:/srv/backup'
       - 'data_static:/srv/static'
       - 'data_bower:/srv/bower'
       - 'data_log_nginx:/var/log/nginx'
       - 'data_log_uwsgi:/var/log/uwsgi'

  db:
    image: "${MYSQL_IMAGE_NAME}:${MYSQL_IMAGE_VERSION}"
    restart: 'unless-stopped'
    logging: *default-logging
    networks: *network-internal
    env_file:
      - './telemeta_mshs/apps/Telemeta/env/prod.env'
    healthcheck:
      test: ["CMD-SHELL", "mysql -u $${MYSQL_USER} -p$${MYSQL_PASSWORD} -e 'SHOW DATABASES;'"]
      interval: '30s'
      timeout: '2s'
      retries: 3
    volumes:
      - './telemeta_mshs/apps/Telemeta/scripts/:/srv/scripts'
      - 'mysql_data:/var/lib/mysql'
    volumes_from:
      - 'data'

  broker:
    image: "${BROKER_IMAGE_NAME}:${BROKER_IMAGE_VERSION}"
    restart: 'unless-stopped'
    logging: *default-logging
    networks: *network-internal

  search:
    image: "${SEARCH_IMAGE_NAME}:${SEARCH_IMAGE_VERSION}"
    restart: 'unless-stopped'
    logging: *default-logging
    networks: *network-internal

  app:
    image: "${APP_IMAGE_NAME}:${APP_IMAGE_VERSION}"
    build:
      context: .
    command: '/bin/bash /srv/scripts/start_api.sh'
    restart: 'unless-stopped'
    logging: *default-logging
    depends_on:
      db:
        condition: 'service_healthy'
    env_file:
      - './telemeta_mshs/apps/Telemeta/env/debug.env'
      - './francoralite-env/app.env'
    healthcheck:
      test: ["CMD-SHELL", "nc -z 127.0.0.1 8000"]
      interval: '10s'
      timeout: '2s'
      retries: 20
    networks:
      - 'services'
      - 'francoralite'
    volumes:
      - './:/srv/app'
      - './scripts:/srv/scripts'
      - './telemeta_mshs/apps/Telemeta/app/enumeration:/srv/app/enumeration'
      - './telemeta_mshs/apps/Telemeta/app/fixtures:/srv/app/fixtures'
      - './telemeta_mshs/settings/base.py:/srv/app/settings.py'
      - './telemeta_mshs/apps/Telemeta/app/settings.py:/srv/app/telemeta_settings.py'
      - './telemeta_mshs/apps/Telemeta/app/worker.py:/srv/app/worker.py'
      - './telemeta_mshs/apps/Telemeta/app/robots.txt:/srv/app/telemeta_mshs/robots.txt'
      - './etc/keycloak/auth.json:/tmp/authorization_config.json'
    volumes_from:
      - 'data'

  worker:
    image: "${WORKER_IMAGE_NAME}:${WORKER_IMAGE_VERSION}"
    build:
      context: .
    command: '/bin/bash /srv/scripts/start_worker.sh'
    restart: 'unless-stopped'
    logging: *default-logging
    networks: *network-internal
    depends_on:
      app:
        condition: 'service_healthy'
    env_file:
      - './telemeta_mshs/apps/Telemeta/env/prod.env'
    volumes_from:
      - 'app'

  nginx:
    image: "${NGINX_IMAGE_NAME}:${NGINX_IMAGE_VERSION}"
    image: 'nginx'
    restart: 'unless-stopped'
    logging: *default-logging
    depends_on:
      - 'app'
      - 'keycloak'
      - 'phpmyadmin'
    networks:
      - 'services'
    volumes:
      - './etc/nginx.conf:/etc/nginx/conf.d/default.conf'
    volumes_from:
      - 'data'

  keycloak:
    image: "${KEYCLOAK_IMAGE_NAME}:${KEYCLOAK_IMAGE_VERSION}"
    restart: 'unless-stopped'
    logging: *default-logging
    env_file:
      - './francoralite-env/keycloak.env'
    networks:
      keycloak:
        aliases:
          - 'keycloak'
      services:
        aliases:
          - 'keycloak'
          - 'keycloak.francoralite.localhost'
    depends_on:
      - 'keycloak_db'

  keycloak_db:
    image: "${POSTGRES_IMAGE_NAME}:${POSTGRES_IMAGE_VERSION}"
    restart: 'unless-stopped'
    logging: *default-logging
    env_file:
      - './francoralite-env/keycloak_database.env'
    networks:
      - 'keycloak'
    volumes:
      - 'keycloak_db:/var/lib/postgresql/data'

volumes:
  data_backup: {}
  data_bower: {}
  data_log_nginx: {}
  data_log_uwsgi: {}
  data_media: {}
  data_static: {}
  keycloak_db: {}
  mysql_data: {}
